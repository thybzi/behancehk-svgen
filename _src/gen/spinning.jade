- var canvasWidth = width
- var canvasHeight = height
- var canvasCenterX = canvasWidth / 2
- var canvasCenterY = canvasHeight / 2
-
  var animatedLines = [];
  var animatedLinesClassnames = [];
  lines.forEach(function (lineItem, i) {
    var classname = 'line' + (i + 1);
    lines[i].push(classname);
    if (typeof lineItem[1] === 'number') {
      animatedLines.push([classname, lineItem[1]]);
      animatedLinesClassnames.push(classname);
    }
  });

mixin drawLines(beginPoint, endPoint, count, classname)
  - var rotateStep = 360 / count
  - for (var i = 0; i < count; i++)
  g(transform='rotate(' + (i * rotateStep) + ', ' + canvasCenterX + ', ' + canvasCenterY + ')')
    line(class=classname, x1=canvasCenterX, y1=(canvasCenterY + beginPoint), x2=canvasCenterX, y2=(canvasCenterY + endPoint))/

svg(width=canvasWidth, height=canvasHeight, version='1.1', xmlns='http://www.w3.org/2000/svg')
  style
    | line {
    |   stroke: #0057ff;
    |   stroke-width: 1px;
    |   -webkit-transform-origin: 50% 50%;
    |   transform-origin: 50% 50%;
    | }
    | @-webkit-keyframes rotation {
    |   0% {
    |     -webkit-transform: rotate(0deg);
    |   }
    |   33%, 100% {
    |     -webkit-transform: rotate(180deg);
    |   }
    | }
    | @keyframes rotation {
    |   0% {
    |     transform: rotate(0deg);
    |   }
    |   33%, 100% {
    |     transform: rotate(180deg);
    |   }
    | }
    | .#{animatedLinesClassnames.join(', .')} {
    |   /* Safari */
    |   -webkit-animation-name: rotation;
    |   -webkit-animation-duration: #{duration}ms;
    |   -webkit-animation-timing-function: linear;
    |   -webkit-animation-iteration-count: infinite;
    |   /* Chrome, IE, Firefox */
    |   animation-name: rotation;
    |   animation-duration: #{duration}ms;
    |   animation-timing-function: linear;
    |   animation-iteration-count: infinite;
    | }
    each lineItem in animatedLines
      | .#{lineItem[0]} {
      |   -webkit-animation-delay: #{lineItem[1]}ms;
      |   animation-delay: #{lineItem[1]}ms;
      | }

  - var beginPoint = center
  - var endPoint
  each lineItem in lines
    if lineItem[2]
      - endPoint = beginPoint + lineItem[0]
      +drawLines(beginPoint, endPoint, lineItem[2], lineItem[3])
      - beginPoint = endPoint
