- var canvasWidth = width
- var canvasHeight = height
- var canvasCenterX = canvasWidth / 2
- var canvasCenterY = canvasHeight / 2
-
  var animatedLines = [];
  var animatedClassnames = [];
  var animatedLinesClassnames = [];
  var animatedGroupsClassnames = [];
  lines.forEach(function (lineItem, i) {
    var ordinal = i + 1;
    var lineClassname = 'line' + ordinal;
    var groupClassname = 'group' + ordinal;
    lines[i].lineClassname = lineClassname;
    lines[i].groupClassname = groupClassname;
    if (typeof lineItem.delay === 'number') {
      animatedLines.push({lineClassname: lineClassname, groupClassname: groupClassname, delay: lineItem.delay});
      animatedLinesClassnames.push(lineClassname);
      animatedGroupsClassnames.push(groupClassname);
      animatedClassnames.push(lineClassname);
      animatedClassnames.push(groupClassname);
    }
  });

mixin drawLines(beginPoint, endPoint, count, lineClassname, groupClassname)
  - var rotateStep = 360 / count
  - var classlist
  g(class=groupClassname)
    - for (var i = 0; i < count; i++)
      - classlist = lineClassname + ' ' + ((i % 2) ? 'ccw' : 'cw')
      g(transform='rotate(' + (i * rotateStep) + ', ' + canvasCenterX + ', ' + canvasCenterY + ')')

        line(class=classlist, x1=canvasCenterX, y1=(canvasCenterY + beginPoint), x2=canvasCenterX, y2=(canvasCenterY + endPoint))/

svg(width=canvasWidth, height=canvasHeight, version='1.1', xmlns='http://www.w3.org/2000/svg')
  style
    | line {
    |   stroke: #{linecolor};
    |   stroke-width: #{linewidth}px;
    | }
    | line, g {
    |   -webkit-transform-origin: 50% 50%;
    |   transform-origin: 50% 50%;
    | }
    | @-webkit-keyframes rotate-ccw {
    |   0% {
    |     -webkit-transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     -webkit-transform: rotate(180deg);
    |   }
    | }
    | @keyframes rotate-ccw {
    |   0% {
    |     transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     transform: rotate(180deg);
    |   }
    | }
    | @-webkit-keyframes rotate-cw {
    |   0% {
    |     -webkit-transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     -webkit-transform: rotate(-180deg);
    |   }
    | }
    | @keyframes rotate-cw {
    |   0% {
    |     transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     transform: rotate(-180deg);
    |   }
    | }
    | @-webkit-keyframes shift-cw {
    |   0% {
    |     -webkit-transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     -webkit-transform: rotate(-#{360 / 64}deg);
    |   }
    | }
    | @keyframes shift-cw {
    |   0% {
    |     transform: rotate(0deg);
    |   }
    |   #{durationRatio}%, 100% {
    |     transform: rotate(-#{360 / 64}deg);
    |   }
    | }
    | .#{animatedClassnames.join(', .')} {
    |   /* Safari */
    |   -webkit-animation-name: rotate-ccw;
    |   -webkit-animation-duration: #{durationTotal}ms;
    |   -webkit-animation-timing-function: #{easing};
    |   -webkit-animation-iteration-count: infinite;
    |   /* Chrome, IE, Firefox */
    |   animation-name: rotate-ccw;
    |   animation-duration: #{durationTotal}ms;
    |   animation-timing-function: #{easing};
    |   animation-iteration-count: infinite;
    | }
    | .#{animatedLinesClassnames.join('.ccw, .')}.ccw {
    |   /* Safari */
    |   -webkit-animation-name: rotate-ccw;
    |   /* Chrome, IE, Firefox */
    |   animation-name: rotate-ccw;
    | }
    | .#{animatedLinesClassnames.join('.cw, .')}.cw {
    |   /* Safari */
    |   -webkit-animation-name: rotate-cw;
    |   /* Chrome, IE, Firefox */
    |   animation-name: rotate-cw;
    | }
    | .#{animatedGroupsClassnames.join(', ')} {
    |   /* Safari */
    |   -webkit-animation-name: shift-cw;
    |   /* Chrome, IE, Firefox */
    |   animation-name: shift-cw;
    | }
    each lineItem in animatedLines
      | .#{lineItem.lineClassname} {
      |   -webkit-animation-delay: #{lineItem.delay}ms;
      |   animation-delay: #{lineItem.delay}ms;
      | }
      | .#{lineItem.groupClassname} {
      |   -webkit-animation-delay: #{lineItem.delay}ms;
      |   animation-delay: #{lineItem.delay}ms;
      | }

  - var beginPoint = 0
  - var endPoint
  each lineItem in lines
    if lineItem.count
      - beginPoint += (lineItem.gap || 0)
      - endPoint = beginPoint + lineItem.length
      +drawLines(beginPoint, endPoint, lineItem.count, lineItem.lineClassname, lineItem.groupClassname)
      - beginPoint = endPoint
