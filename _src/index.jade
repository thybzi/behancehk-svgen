mixin lineItem(ordinal)
  - var values = defaults.lines[ordinal - 1] || [null, null, null, null]
  li
    input(id=('gap_' + ordinal), placeholder='gap before (px)', title='gap before (px)', value=values[0], pattern='[0-9]+')
    input(id=('length_' + ordinal), placeholder='line length (px)', title='line length (px)', value=values[1], pattern='[0-9]+')
    input(id=('delay_' + ordinal), placeholder='anim delay (ms)', title='anim delay (ms)', value=values[2], pattern='[0-9]+')
    input(id=('count_' + ordinal), placeholder='line count', title='line count', value=values[3], pattern='[0-9]+')
- var lineItemsCount = 20
-
  var defaults = {
    width: 1280,
    height: 1280,
    spin: 1000,
    rest: 2000,
    easing: 'ease-out',
    linecolor: '#0057ff',
    linewidth: 1,
    lines: [
      [143, 15, 1000, 64], // 1
      [null, 20, null, 64],
      [null, 10, 1500, 64],
      [null, 24, null, 64],
      [null, 54, null, 128], // 5
      [null, 13, 2000, 128],
      [null, 26, 2500, 128],
      [null, 35, null, 128],
      [null, 24, 3000, 128],
      [null, 44, null, 128], // 10
      [null, 46, null, 128],
      [null, 27, 3500, 256],
      [null, 42, 4000, 256],
      [null, 30, 4500, 256],
      [null, 40, 5000, 256], // 15
      [null, 47, null, 256],
      [null, 300, null, 256],
    ]
  }
doctype html
html
  head
    meta(charset='utf-8')
    title spinning line bg pattern generator
    script(src='runtime.js')
    script(src='spinning.js')
    style.
      h1 { margin: 0; font-size: 1.6em; }
      ol { line-height: 1.6em; }
      input[type=number] { width: 3em; }
      input:invalid { background-color: rgba(255, 0, 0, 0.2); }
  body
    h1 spinning line bg pattern generator
    form
      p size:
        input(id='width', placeholder='canvas width (px)', title='canvas width (px)', value=defaults.width, pattern='[0-9]+', required)
        input(id='height', placeholder='canvas height (px)', title='canvas height (px)', value=defaults.height, pattern='[0-9]+', required)
      p time:
        input(id='spin', placeholder='spin duration (ms)', title='spin duration (ms)', value=defaults.spin, pattern='[0-9]+', required)
        input(id='rest', placeholder='rest duration (ms)', title='rest duration (ms)', value=defaults.rest, pattern='[0-9]+', required)
        input(id='easing', placeholder='anim easing', title='anim easing', value=defaults.easing, required)
      p style:
        input(id='linecolor', type='color', title='line color', value=defaults.linecolor, required)
        input(id='linewidth', type='number', title='line width', value=defaults.linewidth, min='1', required)
      ol
        - for (var i = 1; i <= lineItemsCount; i++)
          +lineItem(i)
      button(type='submit') generate pattern
      button(type='reset') reset values
      script.
        document.scripts[document.scripts.length - 1].parentNode.onsubmit = function(event) {
          event.preventDefault();
          var spin = parseInt(document.getElementById('spin').value);
          var rest = parseInt(document.getElementById('rest').value);
          var total = spin + rest;
          var svgValues = {
            width: parseInt(document.getElementById('width').value),
            height: parseInt(document.getElementById('height').value),
            durationTotal: total,
            durationRatio: spin / total * 100,
            easing: document.getElementById('easing').value,
            linecolor: document.getElementById('linecolor').value,
            linewidth: parseInt(document.getElementById('linewidth').value),
            lines: []
          }
          for (var i = 1; i <= #{lineItemsCount}; i++) {
            svgValues.lines.push({
              gap: parseInt(document.getElementById('gap_' + i).value) || null,
              length: parseInt(document.getElementById('length_' + i).value) || null,
              delay: parseInt(document.getElementById('delay_' + i).value) || null,
              count: parseInt(document.getElementById('count_' + i).value) || null
            });
          }
          var w = window.open('data:image/svg+xml;base64,' + btoa(template(svgValues)));
          w.focus();
        }
